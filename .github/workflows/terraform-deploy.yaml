#nombre de pipeline
name: "terraform deploy test"

# cuando se va a ejecutar, cuando push la branch feature
on:
  push:
    branches:
      - "feature/**"
      - "staging"
      - "main"

#para conectarte con aws necesitas crear role y este role necesita ser anadido a la cuenta luego en la documentacion necesitan esta parte en el texto
permissions:
  id-token: write # This is required for requesting the JWT
  contents: read # This is required for actions/checkout
env:
  AWS_REGION: "us-east-1"
  ENVIRONMENT_STAGE: ${{ (github.ref == 'refs/heads/main' && 'production') || (github.ref == 'refs/heads/staging' && 'staging') || 'dev' }}
## job que se van a ejecutar
jobs:
  terrform-deployment: # nombre del job
    runs-on: ubuntu-latest # en que machine
    # esta seccion se va aplicar en todos los pasos de aqui en adelante like before script in gitlab
    defaults:
      run:
        working-directory: ./Root_module
        shell: bash
    environment: ${{ (github.ref == 'ref/head/main' && 'production') || (github.ref == 'ref/head/staging' && 'staging') || 'dev'}}
    steps:
      # this action clone the repository on the machine
      - name: Git clone the repository
        uses: actions/checkout@v4
      # this action allow me to conect to my aws
      - name: configure aws credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          role-to-assume: ${{ vars.IAM_ROLE }}
          role-session-name: GitHubActionsTerraformIAMrole
          aws-region: ${{ env.AWS_REGION }}

        # this part run the commands needeed to deploy de infra with CI/CD

      - name: terraform init
        run: terraform init -backend-config="bucket=project-david-state-bucket-${ENVIRONMENT_STAGE}"

      - name: terraform fmt
        run: terraform fmt -check

      - name: terraform plan
        run: terraform plan -input=false -var-file=vpc_${ENVIRONMENT_STAGE}.tfvars
      - name: terraform apply
        run: terraform apply -auto-approve -input=false -var-file=vpc_${ENVIRONMENT_STAGE}.tfvars
#    - name: terraform destroy
#       run: terraform destroy -var-file=vpc_${ENVIRONMENT_STAGE}.tfvars -auto-approve
